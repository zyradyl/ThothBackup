#!/bin/sh

#
# File:     thoth-backup
# Title:    macOS Backup Routine
# Author:	  Zyradyl
# License:	MIT
# Version:	0.1
#
# Description:  This is the script for a client side backup on macOS. This
#               script should remain as free from hardcoded variables as
#               possible.
#

#
# Locate needed commands
#
CHMOD="$(which chmod)"
DATE="$(which date)"
GZIP="$(which gzip)"
HOSTNAME_CMD="$(which hostname)"
RSYNC="$(which rsync)"
SSH="$(which ssh)"
WHOAMI="$(which whoami)"

#
# Global Variables
#
BACKUP_SERVER="192.168.1.100"
LOCAL_USERNAME="$($WHOAMI)"
USER_DIR="/Users/$LOCAL_USERNAME"
ARCHIVE_DIR="$USER_DIR/ThothArchive"

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"

EXCLUSIONS="$SCRIPT_DIR/exclusions/exclusions"
FIRST_RUN="$SCRIPT_DIR/triggers/FirstRun"
INITIAL_SYNC="$SCRIPT_DIR/triggers/InitialSync"

HOSTNAME=$($HOSTNAME_CMD)
HOSTNAME=$(echo $HOSTNAME | tr '[:upper:]' '[:lower:]')
BACKUP_USER="$LOCAL_USERNAME-$HOSTNAME-macos"
BACKUP_KEY="$SCRIPT_DIR/key/$BACKUP_USER"

TIMESTAMP=$($DATE +%Y%m%d-%H%M%S%Z)
LOG_FILE="$SCRIPT_DIR/logs/$BACKUP_USER-$TIMESTAMP"

#
# Traps - Trap CTRL-C to handle a graceful interrupt
#
trap ctrl_c INT
function ctrl_c {
  exit 1
}

#
# Global Functions
#
function sync_background {
  ssh="$SSH -i $BACKUP_KEY"
  source="$user_dir"
  dest="$BACKUP_USER@$BACKUP_SERVER:/home/$BACKUP_USER/BACKUP"
  rsync_base="$RSYNC -av --exclude-from=$exclusions --ignore-errors --delete -e"
  backup_cmd="$rsync_base $ssh $source $dest"
  $backup_cmd > $log_file 2>&1
  $GZIP $log_file
}
function sync_foreground {
  ssh="$SSH -i $BACKUP_KEY"
  source="$user_dir"
  dest="$backup_user@$BACKUP_SERVER:/home/$backup_user/BACKUP"
  rsync_base="$RSYNC --progress -a --exclude-from=$exclusions --ignore-errors --delete -e"
  backup_cmd="$rsync_base $ssh $source $dest"
  $backup_cmd
}

#
# Stage 1 - Check if the Package is Correctly Set up
#

if [ ! -f $backup_key ]; then
    printf "\n\nFATAL ERROR:\n\n"
    printf "Your backup key is either not present or incorrectly named.\n"
    printf "Please make sure the key directory contains a private key file\n"
    printf "given to you by the server operator. It should have come from\n"
    printf "the operator correctly named. If the file is there, contact the\n"
    printf "operator because your key is not correct and you will need to be\n"
    printf "registered again on the server.\n"
    exit 1
fi

if [ $(stat -f %A $backup_key) != 600 ]; then
  printf "\n\nINFO:\n\n"
  printf "Your backup key does not have the correct permissions to be used\n"
  printf "with ssh. The permissions will be updated to ensure success.\n"
  $CHMOD 600 $backup_key
fi

#
# Stage 2 - Check if this is our first run.
#
#   + We look for a file in the "trigger" directory called "FirstRun"
#   + If it doesn't exist, we assume this is the first run of the program.
#   + If this is the first run, create the Archive Directory and add it to
#     the exclusion list. While the archive is not yet functional, it is
#     better to plan ahead.
#
if [ ! -f $FIRST_RUN ]; then
  printf "First Run Detected, Initializing...\n"
  printf "Welcome to the Thoth Backup System!\n\n"
  printf "Thank you for your interest in this backup software. It should be\n"
  printf "noted now that this software is PROVIDED WITHOUT ANY WARRANTY. If\n"
  printf "you can, you may want to consider another backup client backed by\n"
  printf "a large company. This is just a small private project.\n\n"
  printf "Before we can go any further, an InitialSync must be performed.\n"
  printf "This will copy your current files to the server to speed up the\n"
  printf "actual backups that will happen in the future. This can take a VERY\n"
  printf "long time. A program will be used to prevent your system from\n"
  printf "sleeping. You can cancel this process at any time, and it will\n"
  printf "start from where it left off.\n\n"
  read -p "Press enter to continue."
  if [ ! -d "$ARCHIVE_DIR" ]; then
    mkdir $ARCHIVE_DIR
  fi
  if [ ! -f $EXCLUSIONS ]; then
    echo "$ARCHIVE_DIR" > $EXCLUSIONS
  fi
  touch $FIRST_RUN
elif [ ! -f $INITIAL_SYNC ]; then
  printf "\n\nThe initial syncronization and setup will now start.\n"
  read -p "Press enter to continue."
  sync_foreground
else
  sync_background
fi
